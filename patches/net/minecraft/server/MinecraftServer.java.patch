--- ../src-base/minecraft/net/minecraft/server/MinecraftServer.java
+++ ../src-work/minecraft/net/minecraft/server/MinecraftServer.java
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import carpet.helpers.ScoreboardDelta;
+import carpet.helpers.ThrowableSuppression;
+import carpet.utils.Messenger;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.Futures;
@@ -33,6 +36,7 @@
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
+import java.util.concurrent.Phaser;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
@@ -86,6 +90,15 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import carpet.CarpetServer;
+import carpet.CarpetSettings;
+import carpet.carpetclient.CarpetClientChunkLogger;
+import carpet.helpers.TickSpeed;
+import carpet.utils.CarpetProfiler;
+import carpet.utils.PistonFixes;
+import carpet.utils.TickingArea;
+import carpet.helpers.WorldRunnable;
+
 public abstract class MinecraftServer implements ICommandSender, Runnable, IThreadListener, ISnooperInfo
 {
     private static final Logger field_147145_h = LogManager.getLogger();
@@ -142,8 +155,13 @@
     private Thread field_175590_aa;
     private long field_175591_ab = func_130071_aq();
 
+    private Thread worldThreads[];
+    private WorldRunnable worldRunnables[];
+    private Phaser phaser;
+
     public MinecraftServer(File p_i47054_1_, Proxy p_i47054_2_, DataFixer p_i47054_3_, YggdrasilAuthenticationService p_i47054_4_, MinecraftSessionService p_i47054_5_, GameProfileRepository p_i47054_6_, PlayerProfileCache p_i47054_7_)
     {
+        CarpetServer.init(this); //CM init
         this.field_110456_c = p_i47054_2_;
         this.field_152364_T = p_i47054_4_;
         this.field_147143_S = p_i47054_5_;
@@ -273,7 +291,22 @@
 
         this.field_71318_t.func_72364_a(this.field_71305_c);
         this.func_147139_a(this.func_147135_j());
+        CarpetServer.onLoadAllWorlds(this);
         this.func_71222_d();
+        CarpetServer.loadBots(this);
+
+        //Initialisation of different worldThreads, idk if Phasers are the way to go for Synchronization, but they seem to fit perfectly.
+        phaser = new Phaser();
+        phaser.register();
+
+        worldThreads = new Thread[this.field_71305_c.length];
+        worldRunnables = new WorldRunnable[this.field_71305_c.length];
+        for(int i = 0; i < this.field_71305_c.length; i++){
+            WorldRunnable runnable = new WorldRunnable(this.field_71305_c[i], phaser);
+            worldRunnables[i] = runnable;
+            worldThreads[i] = new Thread(runnable);
+            worldThreads[i].start();
+        }
     }
 
     protected void func_71222_d()
@@ -285,25 +318,32 @@
         int i1 = 0;
         this.func_71192_d("menu.generatingTerrain");
         int j1 = 0;
-        field_147145_h.info("Preparing start region for level 0");
-        WorldServer worldserver = this.field_71305_c[0];
-        BlockPos blockpos = worldserver.func_175694_M();
-        long k1 = func_130071_aq();
-
-        for (int l1 = -192; l1 <= 192 && this.func_71278_l(); l1 += 16)
+        if (CarpetSettings.tickingAreas)
         {
-            for (int i2 = -192; i2 <= 192 && this.func_71278_l(); i2 += 16)
-            {
-                long j2 = func_130071_aq();
+            TickingArea.initialChunkLoad(this, true);
+        }
+        if (!CarpetSettings.disableSpawnChunks)
+        {
+            field_147145_h.info("Preparing start region for level 0");
+            WorldServer worldserver = this.field_71305_c[0];
+            BlockPos blockpos = worldserver.func_175694_M();
+            long k1 = func_130071_aq();
 
-                if (j2 - k1 > 1000L)
+            for (int l1 = -192; l1 <= 192 && this.func_71278_l(); l1 += 16)
+            {
+                for (int i2 = -192; i2 <= 192 && this.func_71278_l(); i2 += 16)
                 {
-                    this.func_71216_a_("Preparing spawn area", i1 * 100 / 625);
-                    k1 = j2;
-                }
+                    long j2 = func_130071_aq();
 
-                ++i1;
-                worldserver.func_72863_F().func_186025_d(blockpos.func_177958_n() + l1 >> 4, blockpos.func_177952_p() + i2 >> 4);
+                    if (j2 - k1 > 1000L)
+                    {
+                        this.func_71216_a_("Preparing spawn area", i1 * 100 / 625);
+                        k1 = j2;
+                    }
+
+                    ++i1;
+                    worldserver.func_72863_F().func_186025_d(blockpos.func_177958_n() + l1 >> 4, blockpos.func_177952_p() + i2 >> 4);
+                }
             }
         }
 
@@ -341,7 +381,7 @@
 
     public abstract boolean func_183002_r();
 
-    protected void func_71216_a_(String p_71216_1_, int p_71216_2_)
+    public void func_71216_a_(String p_71216_1_, int p_71216_2_) // CM changed visibility to public
     {
         this.field_71302_d = p_71216_1_;
         this.field_71303_e = p_71216_2_;
@@ -375,6 +415,7 @@
                 }
             }
         }
+        CarpetServer.onWorldsSaved(this);
     }
 
     protected void func_71260_j()
@@ -389,6 +430,8 @@
         if (this.field_71318_t != null)
         {
             field_147145_h.info("Saving players");
+            this.field_71318_t.removeBotTeam();
+            this.field_71318_t.storeFakePlayerData();
             this.field_71318_t.func_72389_g();
             this.field_71318_t.func_72392_r();
         }
@@ -450,18 +493,33 @@
             {
                 this.field_175591_ab = func_130071_aq();
                 long i = 0L;
-                this.field_147147_p.func_151315_a(new TextComponentString(this.field_71286_C));
+                if ("_".equals(CarpetSettings.customMOTD))
+                    this.field_147147_p.func_151315_a(new TextComponentString(this.field_71286_C));
+                else
+                    this.field_147147_p.func_151315_a(new TextComponentString(CarpetSettings.customMOTD));
                 this.field_147147_p.func_151321_a(new ServerStatusResponse.Version("1.12.2", 340));
                 this.func_184107_a(this.field_147147_p);
 
                 while (this.field_71317_u)
                 {
+                    /* carpet mod commandTick */
+                    //todo check if this check is necessary
+                    if (TickSpeed.time_warp_start_time != 0)
+                    {
+                        if (TickSpeed.continueWarp())
+                        {
+                            this.func_71217_p();
+                            this.field_175591_ab = func_130071_aq();
+                            this.field_71296_Q = true;
+                        }
+                        continue;
+                    }
+                    /* end */
                     long k = func_130071_aq();
                     long j = k - this.field_175591_ab;
 
                     if (j > 2000L && this.field_175591_ab - this.field_71299_R >= 15000L)
                     {
-                        field_147145_h.warn("Can't keep up! Did the system time change, or is the server overloaded? Running {}ms behind, skipping {} tick(s)", Long.valueOf(j), Long.valueOf(j / 50L));
                         j = 2000L;
                         this.field_71299_R = this.field_175591_ab;
                     }
@@ -474,6 +532,7 @@
 
                     i += j;
                     this.field_175591_ab = k;
+                    boolean falling_behind = false;
 
                     if (this.field_71305_c[0].func_73056_e())
                     {
@@ -482,16 +541,36 @@
                     }
                     else
                     {
-                        while (i > 50L)
+                        boolean keeping_up = false;
+                        while (i > TickSpeed.mspt) /* carpet mod 50L */
                         {
-                            i -= 50L;
+                            i -= TickSpeed.mspt; /* carpet mod 50L */
+                            if (CarpetSettings.watchdogFix && keeping_up)
+                            {
+                                this.field_175591_ab = func_130071_aq();
+                                this.field_71296_Q = true;
+                                falling_behind = true;
+                            }
                             this.func_71217_p();
+                            keeping_up = true;
+                            if (CarpetSettings.disableVanillaTickWarp) {
+                                i = func_130071_aq() - k;
+                                break;
+                            }
                         }
                     }
 
-                    Thread.sleep(Math.max(1L, 50L - i));
+                    if (falling_behind)
+                    {
+                        Thread.sleep(1L); /* carpet mod 50L */
+                    }
+                    else
+                    {
+                        Thread.sleep(Math.max(1L, TickSpeed.mspt - i)); /* carpet mod 50L */
+                    }
                     this.field_71296_Q = true;
                 }
+//                waitForWorldThreadsToTerminate();
             }
             else
             {
@@ -543,6 +622,20 @@
         }
     }
 
+    private void waitForWorldThreadsToTerminate(){
+        for(java.lang.Thread worldThread : this.worldThreads){
+            while(true) {
+                try {
+                    worldThread.join();
+                }catch(InterruptedException e) {
+                    System.out.println(e);
+                    continue;
+                }
+                break;
+            }
+        }
+    }
+
     public void func_184107_a(ServerStatusResponse p_184107_1_)
     {
         File file1 = this.func_71209_f("server-icon.png");
@@ -594,6 +687,12 @@
         long i = System.nanoTime();
         ++this.field_71315_w;
 
+        CarpetServer.tick(this);
+        if (CarpetProfiler.tick_health_requested != 0L)
+        {
+            CarpetProfiler.start_tick_profiling();
+        }
+
         if (this.field_71295_T)
         {
             this.field_71295_T = false;
@@ -622,10 +721,16 @@
 
         if (this.field_71315_w % 900 == 0)
         {
+            CarpetProfiler.start_section(null, "Autosave");
             this.field_71304_b.func_76320_a("save");
+            this.field_71318_t.storeFakePlayerData();
             this.field_71318_t.func_72389_g();
+            if(carpet.carpetclient.CarpetClientChunkLogger.logger.enabled)
+                carpet.carpetclient.CarpetClientChunkLogger.setReason("Autosave queuing chunks for unloading");
             this.func_71267_a(true);
+            carpet.carpetclient.CarpetClientChunkLogger.resetReason();
             this.field_71304_b.func_76319_b();
+            CarpetProfiler.end_current_section();
         }
 
         this.field_71304_b.func_76320_a("tallying");
@@ -645,6 +750,20 @@
 
         this.field_71304_b.func_76319_b();
         this.field_71304_b.func_76319_b();
+
+        // ChunkLogger - 0x-CARPET
+        if(CarpetClientChunkLogger.logger.enabled) {
+            CarpetClientChunkLogger.logger.sendAll();
+        }
+
+        if (CarpetProfiler.tick_health_requested != 0L)
+        {
+            CarpetProfiler.end_tick_profiling(this);
+        }
+
+        if(CarpetSettings.scoreboardDelta > 0 && field_71315_w % 20 == 0){
+            ScoreboardDelta.update();
+        }
     }
 
     public void func_71190_q()
@@ -661,63 +780,93 @@
 
         this.field_71304_b.func_76318_c("levels");
 
-        for (int j = 0; j < this.field_71305_c.length; ++j)
+        /*for (int j = 0; j < this.worlds.length; ++j)
         {
             long i = System.nanoTime();
 
-            if (j == 0 || this.func_71255_r())
+            if (j == 0 || this.getAllowNether())
             {
-                WorldServer worldserver = this.field_71305_c[j];
-                this.field_71304_b.func_194340_a(() ->
+                WorldServer worldserver = this.worlds[j];
+                this.profiler.func_194340_a(() ->
                 {
-                    return worldserver.func_72912_H().func_76065_j();
+                    return worldserver.getWorldInfo().getWorldName();
                 });
 
-                if (this.field_71315_w % 20 == 0)
+                if (this.tickCounter % 20 == 0)
                 {
-                    this.field_71304_b.func_76320_a("timeSync");
-                    this.field_71318_t.func_148537_a(new SPacketTimeUpdate(worldserver.func_82737_E(), worldserver.func_72820_D(), worldserver.func_82736_K().func_82766_b("doDaylightCycle")), worldserver.field_73011_w.func_186058_p().func_186068_a());
-                    this.field_71304_b.func_76319_b();
+                    this.profiler.startSection("timeSync");
+                    this.playerList.sendPacketToAllPlayersInDimension(new SPacketTimeUpdate(worldserver.getTotalWorldTime(), worldserver.getWorldTime(), worldserver.getGameRules().getBoolean("doDaylightCycle")), worldserver.provider.getDimensionType().getId());
+                    this.profiler.endSection();
                 }
 
-                this.field_71304_b.func_76320_a("tick");
+                this.profiler.startSection("tick");
 
                 try
                 {
-                    worldserver.func_72835_b();
+                    worldserver.tick();
                 }
+                catch (ThrowableSuppression e)
+                {
+                    Messenger.print_server_message(this, "You just caused a server crash in world tick.");
+                }
                 catch (Throwable throwable1)
                 {
-                    CrashReport crashreport = CrashReport.func_85055_a(throwable1, "Exception ticking world");
-                    worldserver.func_72914_a(crashreport);
-                    throw new ReportedException(crashreport);
+                    CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Exception ticking world");
+                    worldserver.addWorldInfoToCrashReport(crashreport);
+                    if(!CarpetSettings.updateSuppressionCrashFix || !(crashreport.getCrashCause() instanceof ThrowableSuppression) ) {
+                        throw new ReportedException(crashreport);
+                    } else {
+                        Messenger.print_server_message(this, "You just caused a server crash in world tick.");
+                    }
                 }
 
                 try
                 {
-                    worldserver.func_72939_s();
+                    worldserver.updateEntities();
                 }
+                catch (ThrowableSuppression e)
+                {
+                    Messenger.print_server_message(this, "You just caused a server crash in update entities.");
+                }
                 catch (Throwable throwable)
                 {
-                    CrashReport crashreport1 = CrashReport.func_85055_a(throwable, "Exception ticking world entities");
-                    worldserver.func_72914_a(crashreport1);
-                    throw new ReportedException(crashreport1);
+                    CrashReport crashreport1 = CrashReport.makeCrashReport(throwable, "Exception ticking world entities");
+                    worldserver.addWorldInfoToCrashReport(crashreport1);
+                    if(!CarpetSettings.updateSuppressionCrashFix || !(crashreport1.getCrashCause() instanceof ThrowableSuppression) ) {
+                        throw new ReportedException(crashreport1);
+                    } else {
+                        Messenger.print_server_message(this, "You just caused a server crash in update entities.");
+                    }
                 }
 
-                this.field_71304_b.func_76319_b();
-                this.field_71304_b.func_76320_a("tracker");
-                worldserver.func_73039_n().func_72788_a();
-                this.field_71304_b.func_76319_b();
-                this.field_71304_b.func_76319_b();
+                this.profiler.endSection();
+                this.profiler.startSection("tracker");
+                worldserver.getEntityTracker().tick();
+                this.profiler.endSection();
+                this.profiler.endSection();
             }
 
-            this.field_71312_k[j][this.field_71315_w % 100] = System.nanoTime() - i;
+            this.timeOfLastDimensionTick[j][this.tickCounter % 100] = System.nanoTime() - i;
+        }*/
+
+        phaser.arriveAndAwaitAdvance(); //Start of the tick barrier
+
+        phaser.arriveAndAwaitAdvance(); //Teleport barrier
+
+        phaser.arriveAndAwaitAdvance(); //End of the tick barrier
+
+        //End all the threads so we don't save too early. (Did not actually dig the code if that could ever happen, but conservatively assuming it can)
+        if(!func_71278_l())
+        {
+            phaser.forceTermination(); //TODO what is the effect on the Threads
         }
 
+        CarpetProfiler.start_section(null, "Network");
         this.field_71304_b.func_76318_c("connection");
         this.func_147137_ag().func_151269_c();
         this.field_71304_b.func_76318_c("players");
         this.field_71318_t.func_72374_b();
+        CarpetProfiler.end_current_section();
         this.field_71304_b.func_76318_c("commandFunctions");
         this.func_193030_aL().func_73660_a();
         this.field_71304_b.func_76318_c("tickables");
@@ -728,6 +877,8 @@
         }
 
         this.field_71304_b.func_76319_b();
+
+        PistonFixes.onEndTick();
     }
 
     public boolean func_71255_r()
@@ -939,7 +1090,7 @@
 
     public String getServerModName()
     {
-        return "vanilla";
+        return "carpetmod";
     }
 
     public CrashReport func_71230_b(CrashReport p_71230_1_)
@@ -1478,6 +1629,19 @@
         return Thread.currentThread() == this.field_175590_aa;
     }
 
+    public boolean isCallingFromWorldsThread(WorldServer server)
+    {
+        java.lang.Thread currentThread = java.lang.Thread.currentThread();
+        for(int i = 0; i < field_71305_c.length; i++)
+        {
+            if(currentThread == worldThreads[i] && field_71305_c[i] == server)
+            {
+                return true;
+            }
+        }
+        return false;
+    }
+
     public int func_175577_aI()
     {
         return 256;
@@ -1523,4 +1687,8 @@
             this.func_152344_a(this::func_193031_aM);
         }
     }
+
+    public WorldRunnable getWorldRunnables(int i){
+        return worldRunnables[i];
+    }
 }
